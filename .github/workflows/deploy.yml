name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Run linter (non-blocking)
      run: npm run lint || echo "⚠️ Linter issues found but continuing with deploy"
      continue-on-error: true

    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
          cd /opt/docker-projects/charlesmuller-site || {
            echo "Creating project directory..."
            sudo mkdir -p /opt/docker-projects/charlesmuller-site
            sudo chown $USER:$USER /opt/docker-projects/charlesmuller-site
            cd /opt/docker-projects/charlesmuller-site
          }
          
          # Clone or pull latest code
          if [ -d ".git" ]; then
            echo "Updating existing repository..."
            git pull origin main || git pull origin master
          else
            echo "Cloning repository..."
            git clone ${{ github.server_url }}/${{ github.repository }}.git .
          fi
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose -f docker-compose.prod.yml down || true
          
          # Remove old images to free space
          echo "Cleaning up old images..."
          docker image prune -f
          
          # Build and start new containers
          echo "Building and starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d --build
          
          # Show container status
          echo "Container status:"
          docker-compose -f docker-compose.prod.yml ps
          
          echo "Deploy completed successfully!"
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
          # Wait a moment for container to start
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q "charlesmuller-site"; then
            echo "✅ Container is running successfully!"
            
            # Test if the application is responding
            if curl -f http://localhost:3080 > /dev/null 2>&1; then
              echo "✅ Application is responding on port 3080!"
            else
              echo "⚠️  Application might be starting up, check manually"
            fi
          else
            echo "❌ Container is not running!"
            docker-compose -f /opt/docker-projects/charlesmuller-site/docker-compose.prod.yml logs
            exit 1
          fi
        EOF
